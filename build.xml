<?xml version="1.0" encoding="UTF-8"?>

<project name="ant-sf" default="default" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant" xmlns:j2seproject3="http://www.netbeans.org/ns/j2se-project/3">
  <description>Builds, tests, and runs the project ant-sf.</description>

  <property name="verbosity" value="info" />

  <property environment="env" />

  <property name="bin.dir" value="${basedir}/build" />
  <property name="doc.dir" value="${basedir}/docs" />
  <property name="ivy.dir" value="${basedir}/ivy" />
  <property name="tmp.dir" value="${basedir}/tmp" />
  <property name="_tmp.dir" value="${basedir}/.tmp" />

  <property name="ivy.lib.dir" value="${ivy.dir}/lib" />

  <property name="src.dir" value="${basedir}/src/main" />
  <property name="test.dir" value="${basedir}/src/test" />

  <property name="tmp.bin.dir" value="${tmp.dir}/bin" />
  <property name="tmp.obj.dir" value="${tmp.dir}/obj" />
  <property name="tmp.out.dir" value="${tmp.dir}/out" />
  <property name="tmp.test.dir" value="${tmp.dir}/test" />

  <property name="tmp.out.bin.dir" value="${tmp.out.dir}/bin" />

  <import file="nbproject/build-impl.xml" />



  <!-- prepare -->
  <target name="prepare" depends="prepare.log" />
  <target name="-pre-init" depends="prepare.log,prepare.dependencies" />

  <target name="prepare.tasks.ivy">
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
      <classpath>
        <pathelement location="${ivy.dir}/ivy.jar" />
        <fileset dir="${ivy.lib.dir}/build">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
    </taskdef>
  </target>


  <target name="prepare.dependencies" depends="prepare.tasks.ivy">
    <ivy:retrieve pattern="${ivy.lib.dir}/[conf]/[artifact].[ext]" log="quiet" />

    <pathconvert property="ivy.compile.classpath" dirsep="/" pathsep=":">
      <path>
        <fileset dir="${ivy.lib.dir}/compile" includes="**/*.jar" />
      </path>
      <map from="${basedir}${file.separator}" to="" />
    </pathconvert>
    <pathconvert property="ivy.test.classpath" dirsep="/" pathsep=":">
      <path>
        <fileset dir="${ivy.lib.dir}/test" includes="**/*.jar" />
      </path>
      <map from="${basedir}${file.separator}" to="" />
    </pathconvert>
    <uptodate property="prepare.ivy.nbproject.isuptodate" srcfile="${basedir}/ivy.xml" targetfile="nbproject/project.properties" />
    <propertyfile file="nbproject/project.properties" unless:set="prepare.ivy.nbproject.isuptodate">
      <entry operation="=" key="ivy.compile.classpath" value="${ivy.compile.classpath}" />
      <entry operation="=" key="ivy.test.classpath" value="${ivy.test.classpath}" />
    </propertyfile>
  </target>

  <target name="prepare.tasks.jacoco" depends="prepare.dependencies">
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath path="${ivy.test.classpath}" />
    </taskdef>
  </target>

  <target name="prepare.log">
    <record name="${basedir}/build.log" loglevel="${verbosity}" append="false" />
  </target>

  <target name="prepare.tmp">
    <mkdir dir="${tmp.dir}" />
  </target>

  <target name="prepare.jacoco" depends="prepare.tasks.jacoco">
    <delete file="${build.test.results.dir}/jacoco.exec" quiet="true" />
    <property name="jacoco.exec" value="${build.test.results.dir}/jacoco.exec" />
    <jacoco:agent property="test.jvmargs" destfile="${jacoco.exec}" append="true" />
  </target>

  <target name="prepare.version" if="env.PACKAGE_VERSION">
    <property name="package.version" value="${env.PACKAGE_VERSION}" />
    <echo message="Package version is ${package.version}" />

    <loadresource property="package.revision">
      <string value="${package.version}" />
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="(\d+\.\d+)\.\d+" replace="\1" />
        </tokenfilter>
      </filterchain>
    </loadresource>
    <replaceregexp file="${basedir}/ivy.xml" match="(revision=&quot;).*(&quot;)" replace="\1${package.revision}\2" byline="true" />

    <replaceregexp match="(&lt;span\s+class=&quot;version-number&quot;&gt;).*?(&lt;/span&gt;)" replace="\1${package.revision}\2" flags="gs">
      <fileset dir="${doc.dir}" includes="**/*.html"/>
    </replaceregexp>

    <replaceregexp file="${basedir}/manifest.mf" match="^(Implementation-Version:\s).*$" replace="\1${package.version}" byline="true" />
  </target>

  <!-- Redefinition allows to add jacoco agent parameters -->
  <target depends="-init-macrodef-test-impl,-init-macrodef-junit-impl,-init-macrodef-testng-impl" name="-init-macrodef-test">
    <macrodef name="test" uri="http://www.netbeans.org/ns/j2se-project/3">
      <attribute default="${includes}" name="includes"/>
      <attribute default="${excludes}" name="excludes"/>
      <attribute default="**" name="testincludes"/>
      <attribute default="" name="testmethods"/>
      <sequential>
        <j2seproject3:test-impl excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
          <customize>
            <classpath>
              <path path="${run.test.classpath}"/>
            </classpath>
            <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
            <jvmarg line="${run.jvmargs}"/>
            <jvmarg line="${run.jvmargs.ide}"/>
            <jvmarg line="${test.jvmargs}"/>
          </customize>
        </j2seproject3:test-impl>
      </sequential>
    </macrodef>
  </target>


  <!-- clean  (already defined by NetBeans) -->
  <target name="-post-clean" depends="clean.tmp" />

  <target name="clean.tmp">
    <delete dir="${tmp.dir}" includeemptydirs="true" quiet="true" failonerror="false" />
  </target>

  <target name="clean.ivy">
    <delete dir="${ivy.lib.dir}" includeemptydirs="true" quiet="true" failonerror="false" />
  </target>



  <!-- compile  (already defined by NetBeans) -->
  <target name="-pre-compile" depends="prepare.dependencies" />
  <target name="-pre-compile-single" depends="prepare.dependencies" />



  <!-- test  (already defined by NetBeans) -->
  <target name="-pre-test-run" if="have.tests" depends="init,prepare.jacoco">
    <mkdir dir="${build.test.results.dir}" />
  </target>
  <target name="-pre-test-run-single" if="have.tests" depends="init,prepare.jacoco">
    <mkdir dir="${build.test.results.dir}" />
  </target>

  <target name="test-report" if="have.tests" depends="init,test.report.junit,test.report.jacoco" />

  <target name="test.report.junit" if="have.tests">
    <junitreport todir="${tmp.dir}" tofile="junit-results.xml">
      <fileset dir="${build.test.results.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${tmp.dir}/junit-results" />
    </junitreport>
  </target>

  <target name="test.report.jacoco" if="have.tests">
    <jacoco:report>
      <executiondata>
        <file file="${jacoco.exec}" />
      </executiondata>
      <structure name="${ant.project.name}">
        <classfiles>
          <fileset dir="${build.classes.dir}" />
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${file.reference.ant-sf-src}" />
        </sourcefiles>
      </structure>
      <html destdir="${tmp.dir}/jacoco-results" locale="en" />
      <xml destfile="${tmp.dir}/jacoco-results.xml" />
    </jacoco:report>
  </target>



  <!-- analyze -->
  <target name="analyze" depends="prepare.log,analyze.pmd,analyze.cloc" description="Performs code analysis on the project." />

  <target name="analyze.cloc" depends="prepare.tmp" description="Runs CLOC on the project.">
    <exec executable="${_tmp.dir}/cloc.exe" osfamily="windows">
      <arg value="--3" />
      <arg line="--progress-rate=0" />
      <arg value="--xml" />
      <arg line="--exclude-dir=.tmp,.vscode,build,ivy,tmp" />
      <arg line="--out &quot;${tmp.dir}/cloc-results.xml&quot;" />
      <arg value="." />
    </exec>
    <exec executable="perl" osfamily="unix">
      <arg line="&quot;${_tmp.dir}/cloc.pl&quot;" />
      <arg value="--3" />
      <arg line="--progress-rate=0" />
      <arg value="--xml" />
      <arg line="--exclude-dir=.tmp,.vscode,build,ivy,tmp" />
      <arg line="--out &quot;${tmp.dir}/cloc-results.xml&quot;" />
      <arg value="." />
    </exec>
  </target>

  <target name="analyze.pmd" depends="prepare.tmp,prepare.dependencies,init" if="env.PMD_HOME" description="Runs PMD on the project.">
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
      <classpath>
        <fileset dir="${env.PMD_HOME}/lib">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
    </taskdef>
    <condition property="pmd.formatter" value="textcolor" else="text">
      <os family="unix" />
    </condition>

    <pmd failOnRuleViolation="true" cacheLocation="${tmp.obj.dir}/pmd.cache">
      <fileset dir="${src.dir}">
        <include name="**/*.java" />
      </fileset>
      <sourceLanguage name="java" version="${javac.source}"/>
      <ruleset>${basedir}/.ruleset.xml</ruleset>
      <formatter type="${pmd.formatter}" toConsole="true" />
      <formatter type="html" toFile="${tmp.dir}/pmd-results.html" />
      <formatter type="xml" toFile="${tmp.dir}/pmd-results.xml" />
    </pmd>
  </target>



  <!-- package -->
  <target name="package" depends="prepare.log,prepare.version,jar,package.pom" description="Packages the project.">
    <copy todir="${tmp.out.bin.dir}" preservelastmodified="true">
      <resources>
        <file file="${dist.jar}" />
        <file file="${basedir}/ivy.xml" />
      </resources>
    </copy>
    <zip destfile="${tmp.out.bin.dir}/${ant.project.name}.zip" compress="true" level="9" filesonly="true">
      <resources>
        <file file="${dist.jar}" />
        <file file="${basedir}/ivy.xml" />
        <file file="${ivy.runtime.classpath}" />
      </resources>
      <zipfileset dir="docs" prefix="docs" />
    </zip>
  </target>

  <target name="package.pom" depends="prepare.version" if="package.revision">
    <ivy:makepom ivyfile="${basedir}/ivy.xml" pomfile="${tmp.out.bin.dir}/pom.xml" conf="default,compile">
      <mapping conf="default" scope="default" />
      <mapping conf="test" scope="test" />
      <mapping conf="compile" scope="compile" />
    </ivy:makepom>
  </target>



  <!-- build -->
  <target name="build" depends="prepare.log,compile,test,analyze" description="Builds the project." />
  <!-- rebuild -->
  <target name="rebuild" depends="prepare.log,clean,build" description="Rebuilds the project." />
  <!-- release -->
  <target name="release" depends="prepare.log,prepare.version,rebuild,package" description="Creates a release for the project." />
</project>
